rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Allow read/write access to authenticated users for payments collection
    match /payments/{document=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
    
    // Allow read/write access to authenticated users for expenses collection
    match /expenses/{document=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isTeacher() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'teacher';
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isValidPayment() {
      let payment = request.resource.data;
      return payment.amount is number && 
             payment.amount > 0 &&
             payment.userId == request.auth.uid &&
             payment.createdAt is timestamp &&
             payment.status in ['pending', 'completed', 'failed'];
    }

    function isValidExpense() {
      let expense = request.resource.data;
      return expense.amount is number && 
             expense.amount > 0 &&
             expense.description is string &&
             expense.description.size() > 0 &&
             expense.createdAt is timestamp &&
             expense.category in ['rent', 'utilities', 'salary', 'equipment', 'marketing', 'other'];
    }

    // Payments collection
    match /payments/{paymentId} {
      allow read: if isAuthenticated() && 
        (isAdmin() || resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() && isValidPayment();
      allow update: if isAdmin() && 
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['status', 'updatedAt', 'notes']);
      allow delete: if false; // Payments should never be deleted
    }
    
    // Expenses collection
    match /expenses/{expenseId} {
      allow read: if isAdmin() || isTeacher();
      allow create, update: if isAdmin() && isValidExpense();
      allow delete: if isAdmin();
    }

    // Classes collection
    match /classes/{classId} {
      // Anyone can read published classes
      allow read: if resource.data.status == 'published' || isAdmin() || isTeacher();
      
      // Only admins and teachers can create/update/delete classes
      allow create, delete: if isAdmin() || isTeacher();
      
      // Update validation
      allow update: if (isAdmin() || isTeacher()) ||
        // Students can only update enrollment
        (isAuthenticated() && 
         request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['enrolled', 'enrolledStudents', 'lastUpdated']) &&
         request.resource.data.enrolled <= resource.data.capacity);
    }

    // Users collection
    match /users/{userId} {
      // Users can read and write their own data
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isOwner(userId) && 
        // Users can't modify their own role
        (!('role' in request.resource.data) || 
         resource.data.role == request.resource.data.role) ||
        // Admins can modify everything
        isAdmin();
    }

    // Studio Rentals collection
    match /studioRentals/{rentalId} {
      // Only authenticated users can read rentals
      allow read: if isAuthenticated();
      
      // Authenticated users can create rentals with validation
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.startTime is timestamp &&
        request.resource.data.endTime is timestamp &&
        request.resource.data.endTime > request.resource.data.startTime;
      
      // Users can only update their own rentals with validation
      allow update: if isAuthenticated() &&
        resource.data.userId == request.auth.uid &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.startTime is timestamp &&
        request.resource.data.endTime is timestamp &&
        request.resource.data.endTime > request.resource.data.startTime;
      
      // Only admins can delete rentals
      allow delete: if isAdmin();
    }
  }
} 